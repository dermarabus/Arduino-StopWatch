// Stopwatch Variables
unsigned long startTime = 0;
unsigned long elapsedTime = 0;
bool isRunning = false;
bool isButtonPressed = false;

// Button Pin
const int buttonPin = 2;

// Time Variables
unsigned long previousTime = 0;
const unsigned long interval = 1000; // 1 second interval
const unsigned long debounceDelay = 200; // 200 milliseconds debounce delay

void setup() {
  Serial.begin(9600); // Initialize serial communication
  pinMode(buttonPin, INPUT_PULLUP); // Set button pin as input with internal pull-up resistor
}

void loop() {
  // Check if the button is pressed
  if (digitalRead(buttonPin) == LOW && !isButtonPressed) {
    isButtonPressed = true;
    if (!isRunning) {
      startStopwatch();
    } else {
      stopStopwatch();
      delay(debounceDelay); // Add a debounce delay to prevent immediate restart
    }
  } else if (digitalRead(buttonPin) == HIGH) {
    isButtonPressed = false;
  }

  // Update stopwatch and display time on the serial monitor
  if (isRunning) {
    updateStopwatch();

    // Display time once every second
    unsigned long currentTime = millis();
    if (currentTime - previousTime >= interval) {
      previousTime = currentTime;
      displayTime();
    }
  }
}

void startStopwatch() {
  startTime = millis();
  isRunning = true;
}

void stopStopwatch() {
  elapsedTime = millis() - startTime;
  isRunning = false;
}

void updateStopwatch() {
  elapsedTime = millis() - startTime;
}

void displayTime() {
  unsigned long seconds = (elapsedTime / 1000) % 60;
  unsigned long minutes = (elapsedTime / 60000) % 60;
  unsigned long hours = (elapsedTime / 3600000) % 24;

  Serial.print("Elapsed Time: ");
  Serial.print(hours);
  Serial.print("h ");
  Serial.print(minutes);
  Serial.print("m ");
  Serial.print(seconds);
  Serial.println("s");
}
